<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1467318086351">{:repl-history {:ide [], :local [&quot;(require 'todo.core)&quot; &quot;(todo.core/foo Kevin)&quot; &quot;(app)&quot; &quot;(todo.core/handler \&quot;GET\&quot;)&quot; &quot;\n(todo.core/boot)&quot; &quot;(todo.core/boot)&quot; &quot;(todo.core/app \&quot;GET\&quot;)&quot; &quot;(todo.core/foo \&quot;Kevin\&quot;)&quot; &quot;(app \&quot;GET\&quot;)&quot; &quot;(handler \&quot;GET\&quot;)&quot; &quot;(a-test)&quot; &quot;(use 'todo.core-test)&quot; &quot;(foo \&quot;Kevin\&quot;)&quot; &quot;(use todo.core)&quot; &quot;(use '[clojure.tools.namespace.repl :only (refresh)])&quot; &quot;AbstractMethodError(refresh)&quot; &quot;(use )&quot; &quot;(run-specs)&quot; &quot;(use 'todo.core-spec)&quot; &quot;(test)&quot; &quot;(use 'todo.core)&quot; &quot;cheshire/generate-string({:name \&quot;Kevin\&quot; :desc \&quot;Description\&quot;})&quot; &quot;(use 'todo.persist)&quot; &quot;(count (getAll \&quot;TEST\&quot;))&quot; &quot;(getAll \&quot;TEST\&quot;)&quot; &quot;(pop (getAll \&quot;TEST\&quot;))&quot; &quot;(asyncAll (client/smembers redis todoset)\n          )&quot; &quot;(require '[redis-async.client :as client])&quot; &quot;((client/smembers redis \&quot;TEST\&quot;))&quot; &quot;(client/smembers redis \&quot;TEST\&quot;))&quot; &quot;(client/smembers redis \&quot;TEST\&quot;)&quot; &quot;(def asyncAll (client/smembers redis todoset) )&quot; &quot;(require '[cheshire.core     :as cheshire])&quot; &quot;(cheshire/decode (client/&lt;!! asyncAll))&quot; &quot;(print (client/&lt;!! asyncAll))&quot; &quot;(first (client/&lt;!! asyncAll))&quot; &quot;(map (client/&lt;!! asyncAll))&quot; &quot;(def asyncAll (client/smembers redis \&quot;TEST\&quot;) )&quot; &quot;(map print (client/&lt;!! asyncAll))&quot; &quot;cheshire/encode &quot; &quot;(def json (cheshire/encode \&quot;{'label': 'value', 'boo': 'hoo'\&quot;)) &quot; &quot;(def json (cheshire/encode \&quot;{'label': 'value', 'boo': 'hoo'}\&quot;))&quot; &quot;(print json)&quot; &quot;(cheshire/decode json)&quot; &quot;(val {:name \&quot;value\&quot;})&quot; &quot;(boot)&quot; &quot;(refresh)&quot;], :remote []}}</component>
</project>